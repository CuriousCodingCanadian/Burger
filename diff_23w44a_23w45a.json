{
    "achievements": {},
    "blocks": {
        "block": {
            "exposed_copper": [
                {
                    "class": "dej",
                    "display_name": "Exposed Copper",
                    "field": "qY",
                    "hardness": 3.0,
                    "max_state_id": 22650,
                    "min_state_id": 22650,
                    "num_states": 1,
                    "numeric_id": 928,
                    "resistance": 6.0,
                    "states": [],
                    "super": [
                        "cvf"
                    ],
                    "text_id": "exposed_copper"
                },
                {
                    "class": "dfe",
                    "display_name": "Exposed Copper",
                    "field": "qX",
                    "max_state_id": 22649,
                    "min_state_id": 22649,
                    "num_states": 1,
                    "numeric_id": 927,
                    "states": [],
                    "super": [
                        "cvz"
                    ],
                    "text_id": "exposed_copper"
                }
            ],
            "oxidized_copper": [
                {
                    "class": "dej",
                    "display_name": "Oxidized Copper",
                    "field": "qW",
                    "hardness": 3.0,
                    "max_state_id": 22648,
                    "min_state_id": 22648,
                    "num_states": 1,
                    "numeric_id": 926,
                    "resistance": 6.0,
                    "states": [],
                    "super": [
                        "cvf"
                    ],
                    "text_id": "oxidized_copper"
                },
                {
                    "class": "dfe",
                    "display_name": "Oxidized Copper",
                    "field": "qZ",
                    "max_state_id": 22651,
                    "min_state_id": 22651,
                    "num_states": 1,
                    "numeric_id": 929,
                    "states": [],
                    "super": [
                        "cvz"
                    ],
                    "text_id": "oxidized_copper"
                }
            ],
            "trial_spawner": [
                null,
                {
                    "block_entity": "trial_spawner",
                    "class": "den",
                    "display_name": "Trial Spawner",
                    "field": "tr",
                    "hardness": 50.0,
                    "max_state_id": 26345,
                    "min_state_id": 26340,
                    "num_states": 6,
                    "numeric_id": 1051,
                    "resistance": 50.0,
                    "states": [
                        {
                            "declared_in": "djf",
                            "enum_class": "dic",
                            "field_name": "b",
                            "name": "trial_spawner_state",
                            "num_values": 6,
                            "type": "enum",
                            "values": [
                                "INACTIVE",
                                "WAITING_FOR_PLAYERS",
                                "ACTIVE",
                                "WAITING_FOR_REWARD_EJECTION",
                                "EJECTING_REWARD",
                                "COOLDOWN"
                            ]
                        }
                    ],
                    "super": [
                        "cvl",
                        "cvz"
                    ],
                    "text_id": "trial_spawner"
                }
            ],
            "weathered_copper": [
                {
                    "class": "dej",
                    "display_name": "Weathered Copper",
                    "field": "qX",
                    "hardness": 3.0,
                    "max_state_id": 22649,
                    "min_state_id": 22649,
                    "num_states": 1,
                    "numeric_id": 927,
                    "resistance": 6.0,
                    "states": [],
                    "super": [
                        "cvf"
                    ],
                    "text_id": "weathered_copper"
                },
                {
                    "class": "dfe",
                    "display_name": "Weathered Copper",
                    "field": "qY",
                    "max_state_id": 22650,
                    "min_state_id": 22650,
                    "num_states": 1,
                    "numeric_id": 928,
                    "states": [],
                    "super": [
                        "cvz"
                    ],
                    "text_id": "weathered_copper"
                }
            ]
        }
    },
    "entities": {
        "dataserializers": {},
        "entity": {
            "breeze": [
                null,
                {
                    "class": "ccv",
                    "display_name": "Breeze",
                    "field": "l",
                    "height": 1.7,
                    "id": 10,
                    "metadata": [
                        {
                            "class": "cbz",
                            "entity": "~abstract_monster"
                        }
                    ],
                    "name": "breeze",
                    "width": 0.6
                }
            ],
            "wind_charge": [
                null,
                {
                    "class": "cfw",
                    "display_name": "Wind Charge",
                    "field": "bk",
                    "height": 0.3125,
                    "id": 113,
                    "metadata": [
                        {
                            "class": "blf",
                            "entity": "~abstract_entity"
                        }
                    ],
                    "name": "wind_charge",
                    "width": 0.3125
                }
            ]
        }
    },
    "language": {
        "accessibility": {
            "onboarding.accessibility.button": [
                null,
                "Accessibility Settings..."
            ]
        },
        "block": {
            "minecraft.trial_spawner": [
                null,
                "Trial Spawner"
            ]
        },
        "entity": {
            "minecraft.breeze": [
                null,
                "Breeze"
            ],
            "minecraft.wind_charge": [
                null,
                "Wind Charge"
            ]
        },
        "item": {
            "minecraft.breeze_spawn_egg": [
                null,
                "Breeze Spawn Egg"
            ],
            "minecraft.trial_key": [
                null,
                "Trial Key"
            ]
        },
        "subtitles": {
            "block.trial_spawner.ambient": [
                null,
                "Trial Spawner crackles"
            ],
            "block.trial_spawner.close_shutter": [
                null,
                "Trial Spawner closes"
            ],
            "block.trial_spawner.detect_player": [
                null,
                "Trial Spawner charges up"
            ],
            "block.trial_spawner.eject_item": [
                null,
                "Trial Spawner ejects items"
            ],
            "block.trial_spawner.open_shutter": [
                null,
                "Trial Spawner opens"
            ],
            "block.trial_spawner.spawn_mob": [
                null,
                "Mob spawns"
            ],
            "entity.breeze.death": [
                null,
                "Breeze dies"
            ],
            "entity.breeze.hurt": [
                null,
                "Breeze hurts"
            ],
            "entity.breeze.idle_air": [
                null,
                "Breeze flies"
            ],
            "entity.breeze.idle_ground": [
                null,
                "Breeze whirs"
            ],
            "entity.breeze.inhale": [
                null,
                "Breeze inhales"
            ],
            "entity.breeze.jump": [
                null,
                "Breeze jumps"
            ],
            "entity.breeze.land": [
                null,
                "Breeze lands"
            ],
            "entity.breeze.shoot": [
                null,
                "Breeze shoots"
            ],
            "entity.breeze.slide": [
                null,
                "Breeze slides"
            ],
            "entity.generic.wind_burst": [
                null,
                "Wind charge bursts"
            ],
            "entity.parrot.imitate.breeze": [
                null,
                "Parrot whirs"
            ]
        }
    },
    "packets": {
        "packet": {
            "PLAY_CLIENTBOUND_1E": [
                {
                    "class": "zk.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 30,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "atq.a(this.a)",
                            "var": "var2"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "atq.a(this.b)",
                            "var": "var3"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "atq.a(this.c)",
                            "var": "var4"
                        },
                        {
                            "field": "e.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Iterator",
                            "value": "this.e.iterator()",
                            "var": "it"
                        },
                        {
                            "condition": "it.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "hx",
                                    "value": "it.next()",
                                    "var": "itv"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "(itv.u() - var2)",
                                    "var": "var5"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "(itv.v() - var3)",
                                    "var": "var6"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "(itv.w() - var4)",
                                    "var": "var7"
                                },
                                {
                                    "field": "var5",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "field": "var6",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "field": "var7",
                                    "operation": "write",
                                    "type": "varint"
                                }
                            ],
                            "operation": "loop"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "g",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "h",
                            "operation": "write",
                            "type": "float"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "zr.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 30,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "aty.a(this.a)",
                            "var": "var2"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "aty.a(this.b)",
                            "var": "var3"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "aty.a(this.c)",
                            "var": "var4"
                        },
                        {
                            "field": "e.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Iterator",
                            "value": "this.e.iterator()",
                            "var": "it"
                        },
                        {
                            "condition": "it.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "hv",
                                    "value": "it.next()",
                                    "var": "itv"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "(itv.u() - var2)",
                                    "var": "var5"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "(itv.v() - var3)",
                                    "var": "var6"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "(itv.w() - var4)",
                                    "var": "var7"
                                },
                                {
                                    "field": "var5",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "field": "var6",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "field": "var7",
                                    "operation": "write",
                                    "type": "varint"
                                }
                            ],
                            "operation": "loop"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "g",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "h",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "k",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "kb.j.getId(i.b())",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "kb.j.getId(j.b())",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "l.d",
                            "operation": "write",
                            "type": "identifier"
                        },
                        {
                            "field": "l.b().isPresent()",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "condition": "l.b().isPresent()",
                            "instructions": [
                                {
                                    "field": "l.b().get()",
                                    "operation": "write",
                                    "type": "float"
                                }
                            ],
                            "operation": "if"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_6E": [
                {
                    "class": "aci.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 110,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "field": "b.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Iterator",
                            "value": "this.b.iterator()",
                            "var": "it"
                        },
                        {
                            "condition": "it.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "af",
                                    "value": "it.next()",
                                    "var": "itv"
                                },
                                {
                                    "field": "itv.a",
                                    "operation": "write",
                                    "type": "identifier"
                                },
                                {
                                    "field": "itv.b.a.isPresent()",
                                    "operation": "write",
                                    "type": "boolean"
                                },
                                {
                                    "condition": "itv.b.a.isPresent()",
                                    "instructions": [
                                        {
                                            "field": "itv.b.a.get()",
                                            "operation": "write",
                                            "type": "identifier"
                                        }
                                    ],
                                    "operation": "if"
                                },
                                {
                                    "field": "itv.b.b.isPresent()",
                                    "operation": "write",
                                    "type": "boolean"
                                },
                                {
                                    "condition": "itv.b.b.isPresent()",
                                    "instructions": [
                                        {
                                            "field": "itv.b.b.get().a",
                                            "operation": "write",
                                            "type": "chatcomponent"
                                        },
                                        {
                                            "field": "itv.b.b.get().b",
                                            "operation": "write",
                                            "type": "chatcomponent"
                                        },
                                        {
                                            "field": "itv.b.b.get().c",
                                            "operation": "write",
                                            "type": "itemstack"
                                        },
                                        {
                                            "field": "itv.b.b.get().e",
                                            "operation": "write",
                                            "type": "enum"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "int",
                                            "value": "0",
                                            "var": "var2"
                                        },
                                        {
                                            "condition": "itv.b.b.get().d != null",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 1)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "condition": "itv.b.b.get().f",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 2)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "condition": "itv.b.b.get().h",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 4)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "field": "var2",
                                            "operation": "write",
                                            "type": "varint"
                                        },
                                        {
                                            "condition": "itv.b.b.get().d != null",
                                            "instructions": [
                                                {
                                                    "field": "itv.b.b.get().d",
                                                    "operation": "write",
                                                    "type": "identifier"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "field": "itv.b.b.get().i",
                                            "operation": "write",
                                            "type": "float"
                                        },
                                        {
                                            "field": "itv.b.b.get().j",
                                            "operation": "write",
                                            "type": "float"
                                        }
                                    ],
                                    "operation": "if"
                                },
                                {
                                    "field": "itv.b.e.b.length",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "itv.b.e.b",
                                    "var": "var2"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "var2.length",
                                    "var": "var3"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "0",
                                    "var": "var4"
                                },
                                {
                                    "condition": "var4 < var3",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "var2[var4]",
                                            "var": "var5"
                                        },
                                        {
                                            "field": "var5.length",
                                            "operation": "write",
                                            "type": "varint"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "var5",
                                            "var": "var6"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "int",
                                            "value": "var6.length",
                                            "var": "var7"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "int",
                                            "value": "0",
                                            "var": "var8"
                                        },
                                        {
                                            "condition": "var8 < var7",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "Object",
                                                    "value": "var6[var8]",
                                                    "var": "var9"
                                                },
                                                {
                                                    "field": "var9",
                                                    "operation": "write",
                                                    "type": "string"
                                                },
                                                {
                                                    "amount": "1",
                                                    "field": "var8",
                                                    "operation": "increment"
                                                }
                                            ],
                                            "operation": "loop"
                                        },
                                        {
                                            "amount": "1",
                                            "field": "var4",
                                            "operation": "increment"
                                        }
                                    ],
                                    "operation": "loop"
                                },
                                {
                                    "field": "itv.b.f",
                                    "operation": "write",
                                    "type": "boolean"
                                }
                            ],
                            "operation": "loop"
                        },
                        {
                            "field": "c.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Iterator",
                            "value": "this.c.iterator()",
                            "var": "it"
                        },
                        {
                            "condition": "it.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "agm",
                                    "value": "it.next()",
                                    "var": "itv"
                                },
                                {
                                    "field": "itv",
                                    "operation": "write",
                                    "type": "identifier"
                                }
                            ],
                            "operation": "loop"
                        },
                        {
                            "field": "d.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Iterator",
                            "value": "this.d.iterator()",
                            "var": "it"
                        },
                        {
                            "condition": "it.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Map.Entry<agm, ah>",
                                    "value": "it.next()",
                                    "var": "itv"
                                },
                                {
                                    "field": "itv.getKey()",
                                    "operation": "write",
                                    "type": "identifier"
                                },
                                {
                                    "field": "itv.getValue().e.size()",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Iterator",
                                    "value": "itv.getValue().e.iterator()",
                                    "var": "it"
                                },
                                {
                                    "condition": "it.hasNext()",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "Map.Entry<java.lang.String, an>",
                                            "value": "it.next()",
                                            "var": "itv"
                                        },
                                        {
                                            "field": "itv.getKey()",
                                            "operation": "write",
                                            "type": "string"
                                        },
                                        {
                                            "field": "itv.getValue().a != null",
                                            "operation": "write",
                                            "type": "boolean"
                                        },
                                        {
                                            "condition": "itv.getValue().a != null",
                                            "instructions": [
                                                {
                                                    "field": "itv.getValue().a.toEpochMilli()",
                                                    "operation": "write",
                                                    "type": "varlong"
                                                }
                                            ],
                                            "operation": "if"
                                        }
                                    ],
                                    "operation": "loop"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "acp.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 110,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "field": "b.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Iterator",
                            "value": "this.b.iterator()",
                            "var": "it"
                        },
                        {
                            "condition": "it.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "af",
                                    "value": "it.next()",
                                    "var": "itv"
                                },
                                {
                                    "field": "itv.a",
                                    "operation": "write",
                                    "type": "identifier"
                                },
                                {
                                    "field": "itv.b.b.isPresent()",
                                    "operation": "write",
                                    "type": "boolean"
                                },
                                {
                                    "condition": "itv.b.b.isPresent()",
                                    "instructions": [
                                        {
                                            "field": "itv.b.b.get()",
                                            "operation": "write",
                                            "type": "identifier"
                                        }
                                    ],
                                    "operation": "if"
                                },
                                {
                                    "field": "itv.b.c.isPresent()",
                                    "operation": "write",
                                    "type": "boolean"
                                },
                                {
                                    "condition": "itv.b.c.isPresent()",
                                    "instructions": [
                                        {
                                            "field": "itv.b.c.get().b",
                                            "operation": "write",
                                            "type": "chatcomponent"
                                        },
                                        {
                                            "field": "itv.b.c.get().c",
                                            "operation": "write",
                                            "type": "chatcomponent"
                                        },
                                        {
                                            "field": "itv.b.c.get().d",
                                            "operation": "write",
                                            "type": "itemstack"
                                        },
                                        {
                                            "field": "itv.b.c.get().f",
                                            "operation": "write",
                                            "type": "enum"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "int",
                                            "value": "0",
                                            "var": "var2"
                                        },
                                        {
                                            "condition": "itv.b.c.get().e.isPresent()",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 1)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "condition": "itv.b.c.get().g",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 2)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "condition": "itv.b.c.get().i",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 4)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "field": "var2",
                                            "operation": "write",
                                            "type": "varint"
                                        },
                                        {
                                            "field": "itv.b.c.get().j",
                                            "operation": "write",
                                            "type": "float"
                                        },
                                        {
                                            "field": "itv.b.c.get().k",
                                            "operation": "write",
                                            "type": "float"
                                        }
                                    ],
                                    "operation": "if"
                                },
                                {
                                    "field": "itv.b.f.c.size()",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Iterator",
                                    "value": "itv.b.f.c.iterator()",
                                    "var": "it"
                                },
                                {
                                    "condition": "it.hasNext()",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "java.util.List",
                                            "value": "it.next()",
                                            "var": "itv"
                                        },
                                        {
                                            "field": "itv.size()",
                                            "operation": "write",
                                            "type": "varint"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "Iterator",
                                            "value": "itv.iterator()",
                                            "var": "it"
                                        },
                                        {
                                            "condition": "it.hasNext()",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "java.lang.String",
                                                    "value": "it.next()",
                                                    "var": "itv"
                                                },
                                                {
                                                    "field": "itv",
                                                    "operation": "write",
                                                    "type": "string"
                                                }
                                            ],
                                            "operation": "loop"
                                        }
                                    ],
                                    "operation": "loop"
                                },
                                {
                                    "field": "itv.b.g",
                                    "operation": "write",
                                    "type": "boolean"
                                }
                            ],
                            "operation": "loop"
                        },
                        {
                            "field": "c.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Iterator",
                            "value": "this.c.iterator()",
                            "var": "it"
                        },
                        {
                            "condition": "it.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "agt",
                                    "value": "it.next()",
                                    "var": "itv"
                                },
                                {
                                    "field": "itv",
                                    "operation": "write",
                                    "type": "identifier"
                                }
                            ],
                            "operation": "loop"
                        },
                        {
                            "field": "d.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Iterator",
                            "value": "this.d.iterator()",
                            "var": "it"
                        },
                        {
                            "condition": "it.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Map.Entry<agt, ah>",
                                    "value": "it.next()",
                                    "var": "itv"
                                },
                                {
                                    "field": "itv.getKey()",
                                    "operation": "write",
                                    "type": "identifier"
                                },
                                {
                                    "field": "itv.getValue().e.size()",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Iterator",
                                    "value": "itv.getValue().e.iterator()",
                                    "var": "it"
                                },
                                {
                                    "condition": "it.hasNext()",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "Map.Entry<java.lang.String, ao>",
                                            "value": "it.next()",
                                            "var": "itv"
                                        },
                                        {
                                            "field": "itv.getKey()",
                                            "operation": "write",
                                            "type": "string"
                                        },
                                        {
                                            "field": "itv.getValue().a != null",
                                            "operation": "write",
                                            "type": "boolean"
                                        },
                                        {
                                            "condition": "itv.getValue().a != null",
                                            "instructions": [
                                                {
                                                    "field": "itv.getValue().a.toEpochMilli()",
                                                    "operation": "write",
                                                    "type": "varlong"
                                                }
                                            ],
                                            "operation": "if"
                                        }
                                    ],
                                    "operation": "loop"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                }
            ]
        }
    },
    "pluginchannels": {},
    "sounds": {
        "block.trial_spawner.ambient": [
            null,
            {
                "field": "lv",
                "id": 645,
                "name": "block.trial_spawner.ambient",
                "sounds": [
                    {
                        "hash": "60f48749f8f5f0de797549f7079b0f2682462bfd",
                        "name": "block/trial_spawner/ambient1"
                    },
                    {
                        "hash": "965a270ab94a7bdd4fd6035e9657236acef845c9",
                        "name": "block/trial_spawner/ambient2"
                    },
                    {
                        "hash": "5c2c79ef9f1997785a709921471078e1387b558c",
                        "name": "block/trial_spawner/ambient3"
                    },
                    {
                        "hash": "7080c902ae1a7544d22f4c7c57a85326231f47c4",
                        "name": "block/trial_spawner/ambient4"
                    },
                    {
                        "hash": "3f432f4a1fe80bea3724725d55a838d211296729",
                        "name": "block/trial_spawner/ambient5"
                    }
                ],
                "subtitle": "Trial Spawner crackles",
                "subtitle_key": "subtitles.block.trial_spawner.ambient"
            }
        ],
        "block.trial_spawner.break": [
            null,
            {
                "field": "lo",
                "id": 638,
                "name": "block.trial_spawner.break",
                "sounds": [
                    {
                        "hash": "01644fe4c50b2ac1c68897171d483bd9ef8bb482",
                        "name": "block/trial_spawner/break1",
                        "volume": 0.9
                    },
                    {
                        "hash": "25d946823bfe74465b6b099461a6b76ebf585e84",
                        "name": "block/trial_spawner/break2",
                        "volume": 0.9
                    },
                    {
                        "hash": "73195a35ab094a02787f06cc6a0f2f525cb6a245",
                        "name": "block/trial_spawner/break3",
                        "volume": 0.9
                    }
                ],
                "subtitle": "Block broken",
                "subtitle_key": "subtitles.block.generic.break"
            }
        ],
        "block.trial_spawner.close_shutter": [
            null,
            {
                "field": "lx",
                "id": 647,
                "name": "block.trial_spawner.close_shutter",
                "sounds": [
                    {
                        "hash": "64cebd4a2cca255cad79825da3c68f8ab8df8a5f",
                        "name": "block/trial_spawner/close_shutter"
                    }
                ],
                "subtitle": "Trial Spawner closes",
                "subtitle_key": "subtitles.block.trial_spawner.close_shutter"
            }
        ],
        "block.trial_spawner.detect_player": [
            null,
            {
                "field": "lu",
                "id": 644,
                "name": "block.trial_spawner.detect_player",
                "sounds": [
                    {
                        "hash": "76c2271026bcf9cbaf16dc1c45942ccacaed1ad6",
                        "name": "block/trial_spawner/detect_player1"
                    },
                    {
                        "hash": "76c2271026bcf9cbaf16dc1c45942ccacaed1ad6",
                        "name": "block/trial_spawner/detect_player1",
                        "pitch": 0.95
                    },
                    {
                        "hash": "e7341254e0a5ae36234413f8db2ed1fbf65cbc29",
                        "name": "block/trial_spawner/detect_player2"
                    },
                    {
                        "hash": "e7341254e0a5ae36234413f8db2ed1fbf65cbc29",
                        "name": "block/trial_spawner/detect_player2",
                        "pitch": 0.95
                    },
                    {
                        "hash": "1d9a3a8ed523ee760778931a7195df9475685ca7",
                        "name": "block/trial_spawner/detect_player3"
                    },
                    {
                        "hash": "1d9a3a8ed523ee760778931a7195df9475685ca7",
                        "name": "block/trial_spawner/detect_player3",
                        "pitch": 0.95
                    }
                ],
                "subtitle": "Trial Spawner charges up",
                "subtitle_key": "subtitles.block.trial_spawner.detect_player"
            }
        ],
        "block.trial_spawner.eject_item": [
            null,
            {
                "field": "ly",
                "id": 648,
                "name": "block.trial_spawner.eject_item",
                "sounds": [
                    {
                        "hash": "1dedc4dacb1e77d5f306e27f0151faff33122f12",
                        "name": "block/trial_spawner/eject_item1"
                    }
                ],
                "subtitle": "Trial Spawner ejects items",
                "subtitle_key": "subtitles.block.trial_spawner.eject_item"
            }
        ],
        "block.trial_spawner.fall": [
            null,
            {
                "field": "ls",
                "id": 642,
                "name": "block.trial_spawner.fall",
                "sounds": [
                    {
                        "hash": "fbe526c75463e454bba0725fc89fba09259f8826",
                        "name": "block/trial_spawner/step1"
                    },
                    {
                        "hash": "c38f4b940b6ab8ef01e2faa0ae1e023d3cf167c5",
                        "name": "block/trial_spawner/step2"
                    },
                    {
                        "hash": "276cd4df500c8e230b5a7c57af249888e320c41c",
                        "name": "block/trial_spawner/step3"
                    },
                    {
                        "hash": "9a4787ab4d579b8b03c70a1fa1552a14fc89608b",
                        "name": "block/trial_spawner/step4"
                    },
                    {
                        "hash": "1c8cf9427698ee08d28de9ee188538906d0d575e",
                        "name": "block/trial_spawner/step5"
                    }
                ]
            }
        ],
        "block.trial_spawner.hit": [
            null,
            {
                "field": "lr",
                "id": 641,
                "name": "block.trial_spawner.hit",
                "sounds": [
                    {
                        "hash": "fbe526c75463e454bba0725fc89fba09259f8826",
                        "name": "block/trial_spawner/step1"
                    },
                    {
                        "hash": "c38f4b940b6ab8ef01e2faa0ae1e023d3cf167c5",
                        "name": "block/trial_spawner/step2"
                    },
                    {
                        "hash": "276cd4df500c8e230b5a7c57af249888e320c41c",
                        "name": "block/trial_spawner/step3"
                    },
                    {
                        "hash": "9a4787ab4d579b8b03c70a1fa1552a14fc89608b",
                        "name": "block/trial_spawner/step4"
                    },
                    {
                        "hash": "1c8cf9427698ee08d28de9ee188538906d0d575e",
                        "name": "block/trial_spawner/step5"
                    }
                ],
                "subtitle": "Block breaking",
                "subtitle_key": "subtitles.block.generic.hit"
            }
        ],
        "block.trial_spawner.open_shutter": [
            null,
            {
                "field": "lw",
                "id": 646,
                "name": "block.trial_spawner.open_shutter",
                "sounds": [
                    {
                        "hash": "1fe672d2cc31b1c9aacac9a29d34ec085bd9139b",
                        "name": "block/trial_spawner/open_shutter"
                    }
                ],
                "subtitle": "Trial Spawner opens",
                "subtitle_key": "subtitles.block.trial_spawner.open_shutter"
            }
        ],
        "block.trial_spawner.place": [
            null,
            {
                "field": "lq",
                "id": 640,
                "name": "block.trial_spawner.place",
                "sounds": [
                    {
                        "hash": "6d21c07cf9af1fbe2f4ebbcfb8c7aa4796e6eab6",
                        "name": "block/trial_spawner/place1"
                    },
                    {
                        "hash": "a0ec9ff35ecff8291949501b1f304c5b2359c4d8",
                        "name": "block/trial_spawner/place2"
                    },
                    {
                        "hash": "d9dc932309a74282182529c6b293cec74d6ac5eb",
                        "name": "block/trial_spawner/place3"
                    }
                ],
                "subtitle": "Block placed",
                "subtitle_key": "subtitles.block.generic.place"
            }
        ],
        "block.trial_spawner.spawn_mob": [
            null,
            {
                "field": "lt",
                "id": 643,
                "name": "block.trial_spawner.spawn_mob",
                "sounds": [
                    {
                        "hash": "3608722543847655288247fa525a1fa049a5aa08",
                        "name": "block/trial_spawner/spawn1"
                    },
                    {
                        "hash": "59f4b7fc2d26a2c35125c97c6c535f545ea92fd8",
                        "name": "block/trial_spawner/spawn2"
                    },
                    {
                        "hash": "58fdda424b9be880eca4a9da0d0aaf6ede10b4d2",
                        "name": "block/trial_spawner/spawn3"
                    },
                    {
                        "hash": "4c6ef668e5a68fec125882632b143a5ffc3f4438",
                        "name": "block/trial_spawner/spawn4"
                    }
                ],
                "subtitle": "Mob spawns",
                "subtitle_key": "subtitles.block.trial_spawner.spawn_mob"
            }
        ],
        "block.trial_spawner.step": [
            null,
            {
                "field": "lp",
                "id": 639,
                "name": "block.trial_spawner.step",
                "sounds": [
                    {
                        "hash": "fbe526c75463e454bba0725fc89fba09259f8826",
                        "name": "block/trial_spawner/step1"
                    },
                    {
                        "hash": "c38f4b940b6ab8ef01e2faa0ae1e023d3cf167c5",
                        "name": "block/trial_spawner/step2"
                    },
                    {
                        "hash": "276cd4df500c8e230b5a7c57af249888e320c41c",
                        "name": "block/trial_spawner/step3"
                    },
                    {
                        "hash": "9a4787ab4d579b8b03c70a1fa1552a14fc89608b",
                        "name": "block/trial_spawner/step4"
                    },
                    {
                        "hash": "1c8cf9427698ee08d28de9ee188538906d0d575e",
                        "name": "block/trial_spawner/step5"
                    }
                ],
                "subtitle": "Footsteps",
                "subtitle_key": "subtitles.block.generic.footsteps"
            }
        ],
        "entity.breeze.death": [
            null,
            {
                "field": "cr",
                "id": 173,
                "name": "entity.breeze.death",
                "sounds": [
                    {
                        "hash": "281c1fcea8953decef64b367705913c8b3921e5b",
                        "name": "mob/breeze/death1"
                    },
                    {
                        "hash": "7c8ba566c4fbe410bc610ce6cce2ff0a75bced30",
                        "name": "mob/breeze/death2"
                    }
                ],
                "subtitle": "Breeze dies",
                "subtitle_key": "subtitles.entity.breeze.death"
            }
        ],
        "entity.breeze.hurt": [
            null,
            {
                "field": "cs",
                "id": 174,
                "name": "entity.breeze.hurt",
                "sounds": [
                    {
                        "hash": "ba8211d400e834c2f7663af2214a68e44ee82942",
                        "name": "mob/breeze/hurt1"
                    },
                    {
                        "hash": "fc603184d75b017650f1d4b4d02254a81aa801df",
                        "name": "mob/breeze/hurt2"
                    },
                    {
                        "hash": "51fff105f89bb1a21a59c621911d80ae231214d9",
                        "name": "mob/breeze/hurt3"
                    }
                ],
                "subtitle": "Breeze hurts",
                "subtitle_key": "subtitles.entity.breeze.hurt"
            }
        ],
        "entity.breeze.idle_air": [
            null,
            {
                "field": "cm",
                "id": 168,
                "name": "entity.breeze.idle_air",
                "sounds": [
                    {
                        "hash": "c9f380ab51cd09044b0e9a5a616db4cd23d2ee7c",
                        "name": "mob/breeze/idle_air1"
                    },
                    {
                        "hash": "eff9aeaffb86d18f6a393eeb64ecdf2148b4317f",
                        "name": "mob/breeze/idle_air2"
                    },
                    {
                        "hash": "50c4bee5ed07eac669f7e7610bc7a18c06c11394",
                        "name": "mob/breeze/idle_air3"
                    },
                    {
                        "hash": "dcba310663183c4e536c89a1eb17f6abb109d024",
                        "name": "mob/breeze/idle_air4"
                    }
                ],
                "subtitle": "Breeze flies",
                "subtitle_key": "subtitles.entity.breeze.idle_air"
            }
        ],
        "entity.breeze.idle_ground": [
            null,
            {
                "field": "cl",
                "id": 167,
                "name": "entity.breeze.idle_ground",
                "sounds": [
                    {
                        "hash": "09a77e9e2047a161c9140e9c0ba57278491f2e54",
                        "name": "mob/breeze/idle1"
                    },
                    {
                        "hash": "809c6d3e279ea8520e6cde8c1b596cd10976a590",
                        "name": "mob/breeze/idle2"
                    },
                    {
                        "hash": "a28f9d998f07b309c048a93bddb2b63ebbef1104",
                        "name": "mob/breeze/idle3"
                    },
                    {
                        "hash": "48dae1357812de51817e71a7603fd8ebe6641c09",
                        "name": "mob/breeze/idle4"
                    },
                    {
                        "hash": "eab660079bc67581cbfd501db8ed8b1cb982c00f",
                        "name": "mob/breeze/idle5"
                    }
                ],
                "subtitle": "Breeze whirs",
                "subtitle_key": "subtitles.entity.breeze.idle_ground"
            }
        ],
        "entity.breeze.inhale": [
            null,
            {
                "field": "ck",
                "id": 166,
                "name": "entity.breeze.inhale",
                "sounds": [
                    {
                        "hash": "13dd3f6cd67c6789ded0108006317cbda08a2aff",
                        "name": "mob/breeze/inhale1"
                    },
                    {
                        "hash": "13dd3f6cd67c6789ded0108006317cbda08a2aff",
                        "name": "mob/breeze/inhale1",
                        "pitch": 1.1
                    },
                    {
                        "hash": "766d75e814c9e6d8ff3a82cded2ef571aae504c4",
                        "name": "mob/breeze/inhale2"
                    },
                    {
                        "hash": "766d75e814c9e6d8ff3a82cded2ef571aae504c4",
                        "name": "mob/breeze/inhale2",
                        "pitch": 1.1
                    }
                ],
                "subtitle": "Breeze inhales",
                "subtitle_key": "subtitles.entity.breeze.inhale"
            }
        ],
        "entity.breeze.jump": [
            null,
            {
                "field": "co",
                "id": 170,
                "name": "entity.breeze.jump",
                "sounds": [
                    {
                        "hash": "82ed8952929824e7c437f45a5267c7117714c8d7",
                        "name": "mob/breeze/jump1"
                    },
                    {
                        "hash": "e6f335c95e1fe48c3a3965f639b7f3471eaa1988",
                        "name": "mob/breeze/jump2"
                    }
                ],
                "subtitle": "Breeze jumps",
                "subtitle_key": "subtitles.entity.breeze.jump"
            }
        ],
        "entity.breeze.land": [
            null,
            {
                "field": "cp",
                "id": 171,
                "name": "entity.breeze.land",
                "sounds": [
                    {
                        "hash": "b34c0a6ad6d02d54d3a073d6faa019d0be9265bf",
                        "name": "mob/breeze/land1"
                    },
                    {
                        "hash": "7cea8fa333a936a8ef9b6f8c1d318d8159a36409",
                        "name": "mob/breeze/land2"
                    }
                ],
                "subtitle": "Breeze lands",
                "subtitle_key": "subtitles.entity.breeze.land"
            }
        ],
        "entity.breeze.shoot": [
            null,
            {
                "field": "cn",
                "id": 169,
                "name": "entity.breeze.shoot",
                "sounds": [
                    {
                        "hash": "7455c3943373804f3cf466981240ef1ef4233184",
                        "name": "mob/breeze/shoot"
                    },
                    {
                        "hash": "7455c3943373804f3cf466981240ef1ef4233184",
                        "name": "mob/breeze/shoot",
                        "pitch": 1.1
                    },
                    {
                        "hash": "7455c3943373804f3cf466981240ef1ef4233184",
                        "name": "mob/breeze/shoot",
                        "pitch": 1.2
                    }
                ],
                "subtitle": "Breeze shoots",
                "subtitle_key": "subtitles.entity.breeze.shoot"
            }
        ],
        "entity.breeze.slide": [
            null,
            {
                "field": "cq",
                "id": 172,
                "name": "entity.breeze.slide",
                "sounds": [
                    {
                        "hash": "edac834e7beb67601c751e771222e039ae093ecf",
                        "name": "mob/breeze/slide1"
                    },
                    {
                        "hash": "555529ac12a4eac2cadbae7563a88e51399cee84",
                        "name": "mob/breeze/slide2"
                    },
                    {
                        "hash": "f5729ac135474feea304d77121e4806814a959ba",
                        "name": "mob/breeze/slide3"
                    },
                    {
                        "hash": "9461754ee0bc00d4486a44627fc147e172001d26",
                        "name": "mob/breeze/slide4"
                    }
                ],
                "subtitle": "Breeze slides",
                "subtitle_key": "subtitles.entity.breeze.slide"
            }
        ],
        "entity.generic.wind_burst": [
            null,
            {
                "field": "Be",
                "id": 1459,
                "name": "entity.generic.wind_burst",
                "sounds": [
                    {
                        "hash": "ed1eb91a8f52c44fab47bfae8502a0758e0fcaff",
                        "name": "mob/breeze/wind_burst1",
                        "pitch": 1.2
                    },
                    {
                        "hash": "bfb5ae6dc11ef5c6c863c822da59e10497195c47",
                        "name": "mob/breeze/wind_burst2",
                        "pitch": 1.2
                    },
                    {
                        "hash": "b980f449c9fde0ca1422e44e3d1605185f0c595f",
                        "name": "mob/breeze/wind_burst3",
                        "pitch": 1.2
                    }
                ],
                "subtitle": "Wind charge bursts",
                "subtitle_key": "subtitles.entity.generic.wind_burst"
            }
        ],
        "entity.parrot.imitate.breeze": [
            null,
            {
                "field": "rP",
                "id": 976,
                "name": "entity.parrot.imitate.breeze",
                "sounds": [
                    {
                        "name": "entity.breeze.idle_ground",
                        "pitch": 1.7,
                        "type": "event",
                        "volume": 0.7
                    }
                ],
                "subtitle": "Parrot whirs",
                "subtitle_key": "subtitles.entity.parrot.imitate.breeze"
            }
        ]
    },
    "stats": {},
    "tags": {},
    "tileentity": {
        "tileentities": {
            "trial_spawner": [
                null,
                {
                    "blocks": [
                        "trial_spawner"
                    ],
                    "class": "dhw",
                    "name": "trial_spawner"
                }
            ]
        }
    },
    "version": {
        "data": [
            3688,
            3690
        ],
        "id": [
            "23w44a",
            "23w45a"
        ],
        "name": [
            "23w44a",
            "23w45a"
        ],
        "protocol": [
            1073741985,
            1073741986
        ]
    }
}